import { Logger } from '../logger';
import { int, float } from '../lang';

//Refined Abstraction
export class CircleShape {
    constructor(x:int, y:int, radius:float, drawingApi:DrawingAPI) {
        this.x = x;
        this.y = y;
        this.radius = radius;
        this.drawingApi = drawingApi;
    }

    //low-level i.e. Implementation specific
    draw() {
        this.drawingApi.drawCircle(this.x, this.y, this.radius);
    }

    //high-level i.e. Abstraction specific
    scale(pct:float) {
        this.radius *= pct;
    }
}

export class DrawingAPI {
    constructor() {
        this.logger = new Logger();
    }

    drawCircle(x:int, y:int, radius:float) {
        throw new Error("Abstract method!");
    }
}

//ConcreteImplementor 1/2
export class DrawingAPI1 extends DrawingAPI {
    drawCircle(x:int, y:int, radius:float) {
        this.logger.log('API1.circle at ' + x + ':' + y + ' radius ' + radius);
    }
}

// ConcreteImplementor 2/2
export class DrawingAPI2 extends DrawingAPI {
    drawCircle(x:int, y:int, radius:float) {
        this.logger.log('API2.circle at ' + x + ':' + y + ' radius ' + radius);
    }
}