import { Logger } from '../logger';
import { int } from '../lang';

export class Subject {
    constructor() {
        this.observers = [];
        this.logger = new Logger();
    }

    register(observer:Observer) {
        this.logger.log(observer.toString() + " is pushed!");
        this.observers.push(observer);
    }

    unregister(observer:Observer) {
        var n:int = this.observers.indexOf(observer);
        this.logger.log(observer.toString() + " is removed");
        this.observers.splice(n, 1);
    }

    notify() {
        this.logger.log("notify all the observers");

        for (var i = 0, max = this.observers.length; i < max; i += 1) {
            this.observers[i].notify();
        }
    }
}

export class ConcreteSubject extends Subject {
    get  SubjectState():int {
        return this.subjectState;
    }

    set SubjectState(subjectState:int) {
        this.subjectState = subjectState;
    }
}


export class Observer {
    constructor() {
        this.logger = new Logger();
    }

    notify() {
        throw new Error("Abstract Method!");
    }

    toString():string {

    }
}

export class ConcreteObserver extends Observer {
    constructor(subject:ConcreteSubject, name:string) {
        super();
        this.logger.log("ConcreteObserver " + name + " is created!");
        this.subject = subject;
        this.name = name;
    }

    notify() {
        this.logger.log("ConcreteObserver's notify method");
        this.logger.log(this.name, this.state);
        this.state = this.subject.SubjectState;
    }

    get Subject():ConcreteSubject {
        return this.subject;
    }

    set Subject(subject:ConcreteSubject) {
        this.subject = subject;
    }

    toString():string {
        return this.name;
    }
}